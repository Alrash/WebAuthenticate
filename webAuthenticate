#! /usr/bin/python
# -*- coding=utf-8 -*-

# @Author: Alrash
# @Email: kasukuikawai@gmail.com
# @required: json, base64

import sys
import errno

import time
import json
import base64
import distutils.util

import webauth.const as const
import webauth.operator as con

if sys.version_info.major == 2:
    sys.stderr.write('Please use python 3 to run!\n')
    sys.exit(-1)

try:
    import argparse
except ImportError:
    sys.stderr.write("The required Argparse modules could not be loaded!\n")
    sys.exit(-1)

DEFAULT_CONFIG = './webAuthenticate.json'

def WIFI():
    url = 'http://a.nuist.edu.cn/index.php'
    urlInit = url + '/index/init'
    urlLogin = url + '/index/login'
    urlLogout = url + '/index/logout'

    config = {
        'ssid': 'i-NUIST',
        'uuid': '7227a596-5871-4dc9-8c15-41be759dcfac', # uuid
        'auto': False,                  # 是否自动连接
        'way': True,                    # 连接方式
        'wait': 0,                      # 连接等待时间
        'username': '',
        'passwd': '',
        'provider': '',
        'enablemacauth': 0,             # 默认选项
        'urlInit': urlInit,
        'urlLogin': urlLogin,
        'urlLogout': urlLogout
        }
    return config

def parse_args():
    # 处理命令行参数
    parser = argparse.ArgumentParser(description = '命令行控制认证校园网')

    # 参数选项
    # 选择进行连接还是断开
    parser.add_argument('-I', '--login', action = 'store_true', dest = 'login', help='接入Internet')
    parser.add_argument('-O', '--logout', action = 'store_true', dest = 'logout', help='断开Internet')

    parser.add_argument('-s', '--section', action = 'store', dest = 'section', help='设置使用组组名')
    parser.add_argument('-c', '--config', action = 'store', dest = 'config', help='配置文件')
    parser.add_argument('-w', '--wait', action = 'store', dest = 'wait', type = int, default = 0, help='连接之前等待时间')
    parser.add_argument('-S', '--status', action = 'store_true', dest = 'status', help='显示当前信息')

    # 连接方式
    parser.add_argument('-a', '--auto', action = 'store_true', dest = 'auto', help = '自动连接校园网络')
    parser.add_argument('-W', '--way', action = 'store', dest = 'way', type = distutils.util.strtobool, default = True, help = '连接方式，01表示，默认NetworkManager; 此项为0，使用WPA')

    parser.add_argument('-v', '--version', action = 'version', version='%(prog)s 1.2')

    return parser.parse_args()

# 读取配置文件
def load_config(args, config):
    # 检查-s选项
    if args.section == None:
        sys.stderr.write("Need -s choice!\n")
        sys.exit(-1)

    # 读取配置文件
    try:
        with open(DEFAULT_CONFIG if args.config == None else args.config, 'r') as f:
            data = json.load(f)
    except OSError as e:
        if e.errno == errno.ENOENT:
            sys.stderr.write("Could not find config file!\n")
            sys.exit(-1)
        else:
            sys.stderr.write("Could not read config file!\n")
            sys.exit(-1)

    # 寻找-s选项配置
    flag = False
    for item in data:
        if item['alias'] == args.section:
            config['username'] = item['username']
            config['passwd'] = item['password'] if item['encrypt'] == True else base64.b64encode(item['password'].encode(encoding = 'utf-8'))
            config['provider'] = item['provider']
            flag = True
            break

    if flag == False:
        sys.stderr.write("Could not find section `{}`!\n".format(args.section))
        sys.exit(-1)

    return config

def filling_config(args, config):
    config['auto'] = args.auto
    config['wait'] = args.wait
    config['way'] = args.way

    return config

# main
def main():
    args = parse_args()

    # 只有接入时，使用配置文件
    config = WIFI()
    if args.login == True:
        config = load_config(args, config)

    # 部分参数填充配置选项
    config = filling_config(args, config)

    # 导入自动连接包
    if config['auto'] == True:
        if config['way'] == True:
            import webauth.nmconnect as net
        else:
            import webauth.pyconnect as net

        check_wifi_ssid = net.check_wifi_ssid(config['ssid'])
        # if check_wifi_ssid == const.DISCONNECTED and net.scan_results(config['ssid']) == False:
        if check_wifi_ssid != const.CONNECTED and net.scan_results(config['ssid']) == False:
            # 扫描网络，查看是否存在ssid
            print('could not find ssid {}'.format(config['ssid']))
            return

        # 连接网络
        if check_wifi_ssid != const.CONNECTED and net.active_connect(config['ssid'], check_wifi_ssid) == False:
            print('failed connect!')
            return

    # 具体操作
    if args.status:
        con.show_info(config)
        return

    if args.logout:
        con.show_info(config)
        return
    
    if args.login:
        if config['wait'] > 0:
            time.sleep(config['wait'])

        con.login(config)

if __name__ == '__main__':
    main()